"""
LCE 389. Find the Difference

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Constraints:
- 0 <= s.length <= 1000
- t.length == s.length + 1
- s and t consist of lowercase English letters.

Topics:
- Hash Table
- String
- Bit Manipulation
- Sorting
"""


class Solution:

    # Time Complexity: O(n) - 1 ms -> 66.07%
    # Space Complexity: O(1) - 17.77 MB -> 71.33%
    def findTheDifference(self, s: str, t: str) -> str:
        ctr_s = Counter(s)
        ctr_t = Counter(t)
        res = ""

        for ltr in ctr_t:
            if ltr not in ctr_s or ctr_t[ltr] != ctr_s[ltr]:
                res = ltr
                break

        return res

    # Time Complexity: O(n) - 1 ms -> 66.07%
    # Space Complexity: O(1) - 17.77 MB -> 71.33%
    def findTheDifference(self, s: str, t: str) -> str:
        ctr_s = [0] * 26
        ctr_t = [0] * 26
        res = ""

        for ltr in s:
            ctr_s[ord(ltr) - ord("a")] += 1

        for ltr in t:
            ctr_t[ord(ltr) - ord("a")] += 1

        for i in range(26):
            if ctr_s[i] != ctr_t[i]:
                res = chr(i + 97)
                break

        return res

    # Time Complexity: O(n log n) - 3 ms -> 53.42%
    # Space Complexity: O(n) - 17.80 MB -> 71.33%
    def findTheDifference(self, s: str, t: str) -> str:
        s = sorted(s)
        t = sorted(t)

        for i in range(len(s)):
            if s[i] != t[i]:
                return t[i]

        return t[-1]

    # Time Complexity: O(n) - 4 ms -> 25.24%
    # Space Complexity: O(1) - 17.82 MB -> 43.75%
    def findTheDifference(self, s: str, t: str) -> str:
        if not s:
            return t

        res = ord(t[-1])
        for i in range(len(s)):
            res ^= ord(s[i])
            res ^= ord(t[i])

        return chr(res)

    # Time Complexity: O(n) - 0 ms -> 100.00%
    # Space Complexity: O(1) - 17.76 MB -> 71.33%
    def findTheDifference(self, s: str, t: str) -> str:
        if not s:
            return t

        ascii_sum_s = sum((ord(ch) for ch in s))
        ascii_sum_t = sum((ord(ch) for ch in t))

        return chr(ascii_sum_t - ascii_sum_s)


"""
  methods:
  1. hash map (counter)
  2. frequency array
  3. sorting
  4. XOR sum (bit manipulation)
  5. difference in ascii values
"""
