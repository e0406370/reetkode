"""
LCM 3631. Sort Threats by Severity and Exploitability (Premium)

You are given a 2D integer array threats, where each threats[i] = [IDi, sevi​, expi]

  - IDi: Unique identifier of the threat.
  - sevi: Indicates the severity of the threat.
  - expi: Indicates the exploitability of the threat.

The score of a threat i is defined as: score = 2 × sevi + expi

Your task is to return threats sorted in descending order of score.

If multiple threats have the same score, sort them by ascending ID​​​​​​​.

Constraints:
- 1 <= threats.length <= 10^5
- threats[i] == [IDi, sevi, expi]
- 1 <= IDi <= 10^6
- 1 <= sevi <= 10^9
- 1 <= expi <= 10^9
- All IDi are unique

Topics:
- Array
- Sorting
"""


class Solution:
    def sortThreats(self, threats: List[List[int]]) -> List[List[int]]:
        threats.sort(key=lambda threat: (-(2 * threat[1] + threat[2]), threat[0]))
        return threats


# Time Complexity: O(n log n) - 227 ms -> 74.14%
# Space Complexity: O(1) - 63.53 MB -> 81.03%
